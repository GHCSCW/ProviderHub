import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { API } from '../globals';
import { environment } from '../../environments/environment';
import { ProviderHubService } from '../app.service';
import { CommonModule, Location } from '@angular/common';
import { GenderPipe, NullablePipe, BoolPipe, SpecialtyTypePipe, ParentSpecialtyPipe, NoValuePipe, PHDatePipe, PhoneToDBPipe, PhoneFromDBPipe } from '../pipes';
import * as $ from 'jquery';
import 'datatables.net';
import 'datatables.net-bs4';
import 'datatables.net-select-bs4';
import 'jquery-ui-bundle';

@Component({
  selector: 'app-vendor',
  templateUrl: './vendor.component.html',
  styleUrls: ['./vendor.component.scss']
})
export class VendorComponent implements OnInit {

  public apiRoot: string;
  public vendorId: number;
  public initialTab: string = "";
  public Vendor: any;
  public Service: any;
  public nav: string;
  public providerDT: any;
  public editingDivWrappers: any;
  public editingDivHeaderWrappers: any;
  public editingHeaderDivs: any;

  constructor(private route: ActivatedRoute, private router: Router,
    private service: ProviderHubService, private location: Location) {
    this.Service = service; this.Vendor = {}; //Vendor.VendorField | Vendor.Addresses[i] | Vendor.Facilities[i]
    this.nav = "Addresses";//"Facilities"
  }

  ngOnInit() {
    this.apiRoot = environment.apiRoot; var _dis = this; var toClick = null;
    this.route.params.subscribe(params => {
      this.vendorId = +params['id'];
      if (params['tabURL']) { this.initialTab = params['tabURL']; } else {
        this.location.replaceState("/Vendor/Addresses/" + this.vendorId);
      }
    });
    var navs = document.getElementById("facility-nav").getElementsByTagName("li");
    for (var i = 0; i < navs.length; i++) {
      navs[i].addEventListener("click", (function (event) {
        return function (e) {
          _dis.nav = this.getAttribute("tab-id");
          _dis.location.replaceState("/Vendor/" + this.getAttribute("tab-url") + "/" + _dis.vendorId);
          if (_dis.nav != 'Facilities') { $("#providersTableDT_wrapper").hide(); } else { $("#providersTableDT_wrapper").show(); } /*cant do in Angular since generated by DT*/
        }
      })(_dis), false);
      if (navs[i].getAttribute("tab-url") == this.initialTab) { toClick = navs[i] as HTMLElement; }
    }
    if (this.initialTab != "") { toClick.click(); }

    this.editingDivWrappers = ['#vendorMainTable', '#vendorAddressTable'];
    this.editingDivHeaderWrappers = ['#vendor-main-header', '#vendorAddressTable td.midHead h5'];//check demo-card .card-title
    this.editingHeaderDivs = [document.getElementById("vendor-main-header")];//child h5 of each midHead, i.e. (next line)
    //for each document.getElementById("vendorAddressTable").getElementsByClassName('midHead')[i], get child h5, to get edit 'i' tags
    //modify 65-79 with 'editingHeaderDivs' to take this into account

    //0=PROVIDER HEADER EDIT, 1=PROVIDER DEMO EDIT
    let _editDiv: any = $("#editVendorHeader");
    let _saveDiv: any = $("#saveVendorHeader");
    let _cancelDiv: any = $("#cancelEditVendorHeader");
    _editDiv.click(function (event) { _dis.editVendor(0, event); });
    _saveDiv.click(function (event) { _dis.saveVendor(0, event); });
    _cancelDiv.click(function (event) { _dis.cancelEdit(0, event); });
    /*for (var i = 0; i < this.editingHeaderDivs.length; i++) {
      (function () {
        var divs = _dis.editingHeaderDivs[i]; var _i = i;
        divs.getElementsByClassName("not-editing")[0].addEventListener("click", function (event) { //edit
          _dis.editVendor(_i, event);
        });
        divs.getElementsByClassName("is-editing")[0].addEventListener("click", function (event) { //save
          _dis.saveVendor(_i, event);
        });
        divs.getElementsByClassName("is-editing")[1].addEventListener("click", function (event) { //cancel
          _dis.cancelEdit(_i, event);
        });
      })();
    }*/

    this.service.hitAPI(this.apiRoot + "Vendor/ByID/" + this.vendorId).subscribe(
      data => {
        //0. Edit/Save buttons and Misc UI
        for (var i = 0; i < this.editingDivWrappers.length; i++) {
          let _editDivs: any = $(this.editingDivHeaderWrappers[i] + " i.is-editing," + this.editingDivWrappers[i] + " .is-editing"); _editDivs.hide(); _editDivs = null;
          let _notEditDivs: any = $(this.editingDivHeaderWrappers[i] + " i.not-editing," + this.editingDivWrappers[i] + " .not-editing"); _notEditDivs.show(); _notEditDivs = null;
        }
        //1. header and addresses
        this.Vendor = data; console.log(data); //Vendor.VendorField | Vendor.Addresses[i] | Vendor.Facilities[i]
        document.getElementById("page-title").innerHTML = this.Vendor.VendorName;
        //this.Vendor.LastUpdatedDate = new PHDatePipe().transform(this.Vendor.LastUpdatedDate.replace(/\D/g, '').slice(0, -4));
        //ADDRESS.LAST_UPDATED_BY AS ALAST_UPDATED_BY, ADDRESS.LAST_UPDATED_DATE AS ALAST_UPDATED_DATE
        for (var i = 0; i < this.Vendor.Addresses.length; i++) {
          //LastUpdatedBy, LastUpdatedDate
          this.Vendor.Addresses[i].LastUpdatedDate = new PHDatePipe().transform(this.Vendor.Addresses[i].LastUpdatedDate.replace(/\D/g, '').slice(0, -4));
          //console.log(this.Vendor.Addresses[i].LastUpdatedDate);
        }
        //1b. resize event trigger when FacDT loaded; due to variable (potentially big) height
        let providersLink: any = $("#facility-nav li[tab-id='Facilities']");
        providersLink.click(function () {
          if (typeof (Event) === 'function') { window.dispatchEvent(new Event('resize')); }
          else { var evt = window.document.createEvent('UIEvents'); evt.initUIEvent('resize', true, false, window, 0); window.dispatchEvent(evt); }
        });
        //2. facilities
        let providersDTID: any = $('#providersTableDT');
        this.providerDT = providersDTID.DataTable({
          select: true,
          paging: false,
          language: { search: "", searchPlaceholder: "Begin typing in a Facility Name, City, or Zip Code to filter search results" },
          data: this.Vendor.Facilities,
          columns: [{
            data: null, render: function (data, type, row) {
              var d = data; return "<a href='../facility/"+d.ID+"'>"+d.FacilityName+"</a>";
            }, searchable: true
          }, {
            data: null, render: function (data, type, row) {
              var d = data; var a1 = d.AddressLine1 == null ? "" : d.AddressLine1; var a2 = d.AddressLine2 == null ? "" : d.AddressLine2;
              return a1 + "<br/>" + a2;
            }, searchable: false
          },
          { data: "City" }, { data: "State", searchable: false }, { data: "ZipCode" }, { data: "PhoneNumber", searchable: false }/*, { data: "FacilityAddress.Region", visible:false, searchable:true}*/
          /*examples of custom-formated and defined columns:
            { data: null, render: function (data, type, row) { var d = data.CredentialListStr; return (d == null) ? "" : d.slice(0, -1).replace(/,/g, ", "); }, searchable: false },
            { data: null, render: function (data, type, row) { var d = data; var r; switch (d.Gender) { case 1: r = "Female"; break; case 2: r = "Male"; break; default: r = " "; break; } return r; }, searchable: false },
            { data: null, render: function (data, type, row) { var d = data.PrimarySpecialty; return d; }, searchable: false },
            { data: null, render: function (data, type, row) { var d = data; return ""; }, searchable: false }
          */
          ],
          order: [[0, "asc"]],
          rowId: 'ID',
          initComplete: function (settings, json) {
            if (_dis.nav != 'Facilities') { $("#providersTableDT_wrapper").hide(); } else { $("#providersTableDT_wrapper").show(); } /*cant do in Angular since generated by DT*/
            if (typeof (Event) === 'function') { window.dispatchEvent(new Event('resize')); }
            else { var evt = window.document.createEvent('UIEvents'); evt.initUIEvent('resize', true, false, window, 0); window.dispatchEvent(evt); }
          }
        });
        /*this.providerDT.on('select',
          (e, dt, type, indexes) => {
            console.log(this.providerDT.rows(indexes).data().pluck("ID"));
            this.onRowSelect(this.providerDT.rows(indexes).data().pluck("ID"));
          }
        );
        this.providerDT.on('deselect',
          (e, dt, type, indexes) => {
            console.log(this.providerDT.rows(indexes).data().pluck("ID"));
            this.onRowSelect(this.providerDT.rows(indexes).data().pluck("ID"));
          }
        );*/
        //3. DT Functionality
        //DEPRECATED: hide results until search query length is >2 characters
        /*this.providerDT.on('search.dt', () => {
          document.getElementById('providersTableDT').getElementsByTagName('tbody')[0].style.visibility = (document.getElementById('providersTableDT_filter').getElementsByTagName('input')[0].value.length < 2) ? "hidden" : "visible";
        });
        document.getElementById('providersTableDT').getElementsByTagName('tbody')[0].style.visibility = (document.getElementById('providersTableDT_filter').getElementsByTagName('input')[0].value.length < 2) ? "hidden" : "visible";*/
        //4. Other
        for (var j = 0; j < this.Vendor.Addresses.length; j++) {
          var _a = this.Vendor.Addresses[j];
          _a.HidePhoneExtension = (_a.PhoneExtension == null || _a.PhoneExtension == '');
          _a.HideAlternatePhoneNumber = (_a.AlternatePhoneNumber == null || _a.AlternatePhoneNumber == '');
          _a.HideAltExtension = (_a.AlternateExtension == null || _a.AlternateExtension == '');
        }
      }
    );
    document.getElementById("page-title").innerHTML = API.selectedVendor;
  }

  //DEFINE
  public onSpecClick(event: any) {
    $(event.target).parent().children("table.specTable").toggle();
    $(event.target).parent().parent().children(".provSpecFooter,.provFacFooter").toggle();
  }

  public onEditAddressClick(addressId: number, event: any) {
    $("#vendorAddressTable" + addressId + " .is-editing").show(); $("#vendorAddressTable" + addressId + " .not-editing").hide();
  }
  public onSaveAddressClick(addressId: number, event: any) {
    $("#vendorAddressTable" + addressId + " .is-editing").hide(); $("#vendorAddressTable" + addressId + " .not-editing").show();
    var phoneFixer = new PhoneToDBPipe();
    function val2(which, aid = addressId) { let _e: any = $("#edit_Vendor_" + which + "_" + aid); return _e.val(); }
    //validate, save, update fields on success, display error on error
    let body: any = { Address1: val2("Address1"), Address2: val2("Address2"), City: val2("City"), State: val2("State"), Zip: val2("ZipCode"), User: "GHC-HMO\\spillai" };
    body.PhoneNumber = phoneFixer.transform(val2("PhoneNumber")); body.PhoneExtension = val2("PhoneExtension"); body.AddressID = addressId;
    body.AlternatePhoneNumber = phoneFixer.transform(val2("AltNumber")); body.AlternateExtension = val2("AltExtension");
    if (isNaN(body.PhoneNumber) || isNaN(body.AlternatePhoneNumber)) { alert("Invalid Phone Number. (must be 10 digit number, leading +1 allowed, dashes and parentheses allowed)"); return; }
    body.FaxNumber = val2("FaxNumber"); body.Website = val2("Website");
    console.log(body);
    //save API call, update display on success, display error on error
    this.service.hitAPI(this.apiRoot + "Vendor/Save/1/" + this.vendorId, JSON.stringify(body)).subscribe(
      data => {
        console.log(data); //this.loading(false, data.POSTvars.type);
        //replace with partial arr matching function
        for (var j = 0; j < this.Vendor.Addresses.length; j++) {
          if (this.Vendor.Addresses[j].AddressID == data.POSTvars.AddressID) { var toUpdate = this.Vendor.Addresses[j]; }
        }
        toUpdate.AddressLine1 = data.POSTvars.Address1; toUpdate.AddressLine2 = data.POSTvars.Address2;
        toUpdate.City = data.POSTvars.City; toUpdate.State = data.POSTvars.State; toUpdate.ZipCode = data.POSTvars.Zip;
        toUpdate.PhoneNumber = data.POSTvars.PhoneNumber; toUpdate.PhoneExtension = data.POSTvars.PhoneExtension;
        toUpdate.AlternatePhoneNumber = data.POSTvars.AlternatePhoneNumber; toUpdate.AlternateExtension = data.POSTvars.AlternateExtension;
        toUpdate.FaxNumber = data.POSTvars.FaxNumber; toUpdate.Website = data.POSTvars.Website;
        toUpdate.HideAlternatePhoneNumber = (data.POSTvars.AlternatePhoneNumber.trim() == "");
        toUpdate.HideAltExtension = (data.POSTvars.AlternateExtension.trim() == "");
        toUpdate.HidePhoneExtension = (data.POSTvars.PhoneExtension.trim() == "");
      }
    );
  }
  public onCancelEditAddressClick(addressId: number, event: any) {
    $("#vendorAddressTable" + addressId + " .is-editing").hide(); $("#vendorAddressTable" + addressId + " .not-editing").show();
    //reset values of is-editing fields to not-editing 'defaults'
  }

  //DEFINE onRowSelect
  private onRowSelect(indexes: number[]): void {
    var providerId = indexes[0];
    console.log(providerId);
    console.log($("tr#" + providerId));
    //location.href = "../facility/" + providerId;
  }

  //DEFINE editVendor, saveVendor, cancelEdit for: type=0 & vendorMainTable | type=1 & ??
  public editVendor(type: number, event: any) {
    $("#vendorMainTable .is-editing, #vendor-main-header .is-editing").show();
    $("#vendorMainTable .not-editing, #vendor-main-header .not-editing").hide();
  }
  public saveVendor(type: number, event: any) {
    $("#vendorMainTable .is-editing, #vendor-main-header .is-editing").hide();
    $("#vendorMainTable .not-editing, #vendor-main-header .not-editing").show();
    function val(which) { let _e: any = $("#edit_Vendor_" + which); return _e.val(); } 
    //build object like  body = { Name:val("Name"), NPI: val("NPI"), User: "GHC-HMO\\spillai" };
    let body: any = { Name: val("Name"), NPI: val("NPI"), TaxID: val("TaxID"), EpicID: val("EpicID"), User: "GHC-HMO\\spillai" };
    console.log(body);
    //save API call, update display on success, display error on error
    this.service.hitAPI(this.apiRoot + "Vendor/Save/0/" + this.vendorId, JSON.stringify(body)).subscribe(
      data => {
        console.log(data); //this.loading(false, data.POSTvars.type);
        //replace with partial arr matching function: for now, like - this.Facility.NPI = data.POSTvars.NPI
        this.Vendor.VendorName = data.POSTvars.Name; this.Vendor.TaxID = data.POSTvars.TaxID;
        this.Vendor.NPI = data.POSTvars.NPI; this.Vendor.EpicID = data.POSTvars.EpicID;
      }
    );
  }
  public cancelEdit(type: number, event: any) {
    $("#vendorMainTable .is-editing, #vendor-main-header .is-editing").hide();
    $("#vendorMainTable .not-editing, #vendor-main-header .not-editing").show();
    //reset values of is-editing fields to not-editing 'defaults'
  }
}
